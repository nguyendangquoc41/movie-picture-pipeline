name: Frontend Continuous Integration

on:
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  lint:
    name: Lint Frontend Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Cache Node Modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install Dependencies
        run: npm ci
        working-directory: starter/frontend

      - name: Run Linter
        run: npm run lint
        working-directory: starter/frontend

  test:
    name: Test Frontend Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Cache Node Modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install Dependencies
        run: npm ci
        working-directory: starter/frontend

      - name: Run Tests
        run: npm run test
        working-directory: starter/frontend

  build:
    name: Build Frontend Docker Image
    needs:
      - lint
      - test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Cache Node Modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install Dependencies
        run: npm ci
        working-directory: starter/frontend

      - name: Run Build
        run: npm run build
        working-directory: starter/frontend

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker Image
        run: |
          docker build --build-arg REACT_APP_MOVIE_API_URL=${{ secrets.MOVIE_API_URL }} \
          -t movie-picture-frontend:latest .
        working-directory: starter/frontend