name: Frontend Continuous Deployment
description: This workflow deploys the frontend application to a Kubernetes cluster, builds Docker images, pushes them to ECR, and ensures the service is accessible.

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  lint:
    name: Lint Frontend Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install Dependencies
        run: npm ci
        working-directory: starter/frontend

      - name: Run Linter
        run: npm run lint
        working-directory: starter/frontend

  test:
    name: Test Frontend Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install Dependencies
        run: npm ci
        working-directory: starter/frontend

      - name: Run Tests
        run: npm run test
        working-directory: starter/frontend

  build:
    name: Build Frontend Docker Image
    needs:
      - lint
      - test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
     
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1
        with:
          region: ${{ secrets.AWS_REGION }}
        
      - name: Login to Amazon ECR Public
        run: |
          aws ecr-public get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin public.ecr.aws
          
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker Image
        run: |
          docker build --build-arg REACT_APP_MOVIE_API_URL=${{ secrets.MOVIE_API_URL }} \
          -t ${{ secrets.ECR_FRONTEND_REPO }}:${{ github.sha }} .
        working-directory: starter/frontend

      - name: Push Docker Image
        run: |
          docker push ${{ secrets.ECR_FRONTEND_REPO }}:${{ github.sha }}
        working-directory: starter/frontend

  deploy:
    name: Deploy Frontend to Kubernetes
    needs:
      - build
    runs-on: ubuntu-latest
    env:
      NAMESPACE: default
      SERVICE_NAME: frontend
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Configure kubectl for EKS
        run: aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name movie-picture-cluster

      - name: Install Kustomize
        run: |
          curl -s "https://api.github.com/repos/kubernetes-sigs/kustomize/releases/latest" | jq -r '.assets[] | select(.name | test("kustomize.*linux.*.tar.gz")) | .browser_download_url' | wget -i -
          tar xzf kustomize_*_linux_amd64.tar.gz
          sudo mv kustomize /usr/local/bin

      - name: Deploy to Kubernetes
        run: |
          cd starter/frontend/k8s
          kustomize edit set image frontend=${{ secrets.ECR_FRONTEND_REPO }}:${{ github.sha }}
          kustomize build | kubectl apply -f -

      - name: Retrieve Frontend Service URL
        run: |
          FRONTEND_URL=$(kubectl get svc -n $NAMESPACE $SERVICE_NAME -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          echo "Frontend Service is accessible at: http://$FRONTEND_URL"